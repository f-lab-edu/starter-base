// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // linux-musl-arm64-openssl-3.0.x: prod mac
  // linux-musl-openssl-3.0.x: prod ncloud
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// 사용자 역할
enum UserRole {
  USER
  ADMIN

  @@map(name: "user_role")
}

/// 사용자
model User {
  id         Int      @id @default(autoincrement())
  nickname   String   @unique @db.VarChar(12)
  email      String   @unique @db.VarChar(254)
  password   String   @db.VarChar(128)
  role       UserRole @default(USER)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  project     Project[]
  sponsorship Sponsorship[]

  @@map(name: "user")
}

/// 프로젝트 카테고리
model ProjectCategory {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(12)

  project Project[]

  @@map(name: "project_category")
}

/// 프로젝트 상태
enum ProjectStatus {
  DRAFT /// 작성중
  REVIEW_PENDING /// 심사 대기
  REVIEW_APPROVED /// 심사 승인
  REVIEW_REJECTED /// 심사 반려
  PROJECT_CANCELED /// 프로젝트 취소
  TO_BE_RELEASED /// 공개 예정
  FUNDING_OPENED /// 펀딩 오픈(진행중)
  FUNDING_SUCCESS /// 펀딩 성사
  FUNDING_FAILURE /// 펀딩 무산
  FUNDING_CANCELED /// 펀딩 취소
  SETTLEMENT_COMPLETED /// 정산 완료

  @@map(name: "project_status")
}

/// 프로젝트
/// 창작자가 펀딩을 진행할 프로젝트에 관한 정보
model Project {
  id               Int           @id @default(autoincrement())
  status           ProjectStatus @default(DRAFT) /// 상태
  title            String        @db.VarChar(32) /// 제목
  summary          String        @db.VarChar(50) /// 요약
  description      String        @db.MediumText /// 마크다운 형식 프로젝트 설명
  thumbnail_url    String        @db.VarChar(2000) /// 대표 이미지 url
  target_amount    BigInt        @default(0) @db.BigInt /// 목표 금액
  collected_amount BigInt        @default(0) @db.BigInt /// 모인 금액
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  created_by    User             @relation(fields: [created_by_id], references: [id]) /// 창작자
  created_by_id Int
  category      ProjectCategory? @relation(fields: [category_id], references: [id]) /// 카테고리
  category_id   Int?

  project_schedule ProjectSchedule[] /// 스케줄(일정)
  project_reword   ProjectReword[] /// 프로젝트 선물 리스트
  sponsorship      Sponsorship[] /// 후원 내역

  @@map(name: "project")
}

/// 프로젝트 스케줄
/// 하나의 프로젝트의 진행 일정에 관한 정보
model ProjectSchedule {
  id                      Int      @id @default(autoincrement())
  funding_start_date      DateTime /// 펀딩 시작일
  funding_due_date        DateTime /// 펀딩 마감일
  payment_due_date        DateTime /// 결제 마감일
  payment_settlement_date DateTime /// 정산일
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  project    Project @relation(fields: [project_id], references: [id]) /// 프로젝트
  project_id Int     @unique

  @@map(name: "project_schedule")
}

/// 프로젝트 선물
/// 사용자가 프로젝트를 후원할 경우 선택할 수 있는 선물에 관한 정보
model ProjectReword {
  id                     Int      @id @default(autoincrement())
  title                  String   @db.VarChar(50) /// 제목
  description            String   @db.VarChar(200) /// 설명
  amount                 Int /// 금액
  limit                  Int? /// 후원 가능 수량
  expected_delivery_date DateTime /// 예상 수령가능 날짜
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  project    Project @relation(fields: [project_id], references: [id]) /// 프로젝트
  project_id Int

  sponsorship_reword SponsorshipReword[] /// 후원 선물 내역

  @@map(name: "project_reword")
}

// TODO: 결제 정보 추가해야 함
// TODO: 후원 상태 추가해야 함
/// 프로젝트 후원
/// 사용자가 특정 프로젝트를 후원할 경우 생성되는 정보
model Sponsorship {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  project       Project @relation(fields: [project_id], references: [id]) /// 후원한 프로젝트
  project_id    Int
  created_by    User    @relation(fields: [created_by_id], references: [id]) /// 후원자
  created_by_id Int

  sponsorship_reword SponsorshipReword[] /// 후원 선물 내역

  @@map(name: "sponsorship")
}

/// 후원 선물 내역
/// 한 번의 후원에서 사용자가 선택한 선물에 대한 정보
model SponsorshipReword {
  id         Int      @id @default(autoincrement())
  count      Int /// 선물(project_reword) 개수
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  reword         ProjectReword @relation(fields: [reword_id], references: [id]) /// 후원한 선물
  reword_id      Int
  sponsorship    Sponsorship   @relation(fields: [sponsorship_id], references: [id]) /// 후원 내역
  sponsorship_id Int

  @@map(name: "sponsorship_reword")
}
